SyntaxFactory.CompilationUnit()
.WithMembers(
    SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
        SyntaxFactory.NamespaceDeclaration(
            SyntaxFactory.QualifiedName(
                SyntaxFactory.QualifiedName(
                    SyntaxFactory.IdentifierName("Nemonuri"),
                    SyntaxFactory.IdentifierName("Study")),
                SyntaxFactory.IdentifierName("CSharpSyntaxRewriter1")))
        .WithOpenBraceToken(
            SyntaxFactory.MissingToken(
                SyntaxFactory.TriviaList(),
                SyntaxKind.OpenBraceToken,
                SyntaxFactory.TriviaList(
                    SyntaxFactory.Trivia(
                        SyntaxFactory.SkippedTokensTrivia()
                        .WithTokens(
                            SyntaxFactory.TokenList(
                                SyntaxFactory.Token(SyntaxKind.SemicolonToken)))))))
        .WithMembers(
            SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                SyntaxFactory.StructDeclaration("ExpressionInArgumentInBlockStructureRawData")
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                .WithMembers(
                    SyntaxFactory.List<MemberDeclarationSyntax>(
                        new MemberDeclarationSyntax[]{
                            SyntaxFactory.FieldDeclaration(
                                SyntaxFactory.VariableDeclaration(
                                    SyntaxFactory.NullableType(
                                        SyntaxFactory.IdentifierName("ExpressionSyntax")))
                                .WithVariables(
                                    SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                                        SyntaxFactory.VariableDeclarator(
                                            SyntaxFactory.Identifier("ExpressionSyntax")))))
                            .WithModifiers(
                                SyntaxFactory.TokenList(
                                    SyntaxFactory.Token(SyntaxKind.PublicKeyword))),
                            SyntaxFactory.FieldDeclaration(
                                SyntaxFactory.VariableDeclaration(
                                    SyntaxFactory.NullableType(
                                        SyntaxFactory.IdentifierName("ArgumentSyntax")))
                                .WithVariables(
                                    SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                                        SyntaxFactory.VariableDeclarator(
                                            SyntaxFactory.Identifier("ArgumentSyntax")))))
                            .WithModifiers(
                                SyntaxFactory.TokenList(
                                    SyntaxFactory.Token(SyntaxKind.PublicKeyword))),
                            SyntaxFactory.FieldDeclaration(
                                SyntaxFactory.VariableDeclaration(
                                    SyntaxFactory.NullableType(
                                        SyntaxFactory.IdentifierName("BlockSyntax")))
                                .WithVariables(
                                    SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                                        SyntaxFactory.VariableDeclarator(
                                            SyntaxFactory.Identifier("BlockSyntax")))))
                            .WithModifiers(
                                SyntaxFactory.TokenList(
                                    SyntaxFactory.Token(SyntaxKind.PublicKeyword))),
                            SyntaxFactory.PropertyDeclaration(
                                SyntaxFactory.PredefinedType(
                                    SyntaxFactory.Token(SyntaxKind.BoolKeyword)),
                                SyntaxFactory.Identifier("IsSatisfyingStructure"))
                            .WithModifiers(
                                SyntaxFactory.TokenList(
                                    new []{
                                        SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                                        SyntaxFactory.Token(SyntaxKind.ReadOnlyKeyword)}))
                            .WithExpressionBody(
                                SyntaxFactory.ArrowExpressionClause(
                                    SyntaxFactory.BinaryExpression(
                                        SyntaxKind.LogicalAndExpression,
                                        SyntaxFactory.IsPatternExpression(
                                            SyntaxFactory.TupleExpression(
                                                SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                                    new SyntaxNodeOrToken[]{
                                                        SyntaxFactory.Argument(
                                                            SyntaxFactory.IdentifierName("ExpressionSyntax")),
                                                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                        SyntaxFactory.Argument(
                                                            SyntaxFactory.IdentifierName("ArgumentSyntax")),
                                                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                        SyntaxFactory.Argument(
                                                            SyntaxFactory.IdentifierName("BlockSyntax"))})),
                                            SyntaxFactory.RecursivePattern()
                                            .WithPositionalPatternClause(
                                                SyntaxFactory.PositionalPatternClause(
                                                    SyntaxFactory.SeparatedList<SubpatternSyntax>(
                                                        new SyntaxNodeOrToken[]{
                                                            SyntaxFactory.Subpattern(
                                                                SyntaxFactory.RecursivePattern()
                                                                .WithPropertyPatternClause(
                                                                    SyntaxFactory.PropertyPatternClause())
                                                                .WithDesignation(
                                                                    SyntaxFactory.SingleVariableDesignation(
                                                                        SyntaxFactory.Identifier("e")))),
                                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                            SyntaxFactory.Subpattern(
                                                                SyntaxFactory.RecursivePattern()
                                                                .WithPropertyPatternClause(
                                                                    SyntaxFactory.PropertyPatternClause())
                                                                .WithDesignation(
                                                                    SyntaxFactory.SingleVariableDesignation(
                                                                        SyntaxFactory.Identifier("a")))),
                                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                            SyntaxFactory.Subpattern(
                                                                SyntaxFactory.RecursivePattern()
                                                                .WithPropertyPatternClause(
                                                                    SyntaxFactory.PropertyPatternClause())
                                                                .WithDesignation(
                                                                    SyntaxFactory.SingleVariableDesignation(
                                                                        SyntaxFactory.Identifier("b"))))})))),
                                        SyntaxFactory.InvocationExpression(
                                            SyntaxFactory.MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                SyntaxFactory.IdentifierName("CSharpSyntaxRelationTheory"),
                                                SyntaxFactory.IdentifierName("IsExpressionInArgumentInBlockStructure")))
                                        .WithArgumentList(
                                            SyntaxFactory.ArgumentList(
                                                SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                                    new SyntaxNodeOrToken[]{
                                                        SyntaxFactory.Argument(
                                                            SyntaxFactory.IdentifierName("e")),
                                                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                        SyntaxFactory.Argument(
                                                            SyntaxFactory.IdentifierName("a")),
                                                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                        SyntaxFactory.Argument(
                                                            SyntaxFactory.IdentifierName("b"))}))))))
                            .WithSemicolonToken(
                                SyntaxFactory.Token(SyntaxKind.SemicolonToken))}))))
        .WithCloseBraceToken(
            SyntaxFactory.MissingToken(SyntaxKind.CloseBraceToken))))
.NormalizeWhitespace()
