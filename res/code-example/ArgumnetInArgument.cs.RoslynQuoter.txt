SyntaxFactory.CompilationUnit()
.WithUsings(
    SyntaxFactory.SingletonList<UsingDirectiveSyntax>(
        SyntaxFactory.UsingDirective(
            SyntaxFactory.IdentifierName("System"))))
.WithMembers(
    SyntaxFactory.List<MemberDeclarationSyntax>(
        new MemberDeclarationSyntax[]{
            SyntaxFactory.GlobalStatement(
                SyntaxFactory.ExpressionStatement(
                    SyntaxFactory.InvocationExpression(
                        SyntaxFactory.MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            SyntaxFactory.IdentifierName("Console"),
                            SyntaxFactory.IdentifierName("WriteLine")))
                    .WithArgumentList(
                        SyntaxFactory.ArgumentList(
                            SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                SyntaxFactory.Argument(
                                    SyntaxFactory.InvocationExpression(
                                        SyntaxFactory.IdentifierName("Calulate"))
                                    .WithArgumentList(
                                        SyntaxFactory.ArgumentList(
                                            SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                                new SyntaxNodeOrToken[]{
                                                    SyntaxFactory.Argument(
                                                        SyntaxFactory.ParenthesizedLambdaExpression()
                                                        .WithParameterList(
                                                            SyntaxFactory.ParameterList(
                                                                SyntaxFactory.SeparatedList<ParameterSyntax>(
                                                                    new SyntaxNodeOrToken[]{
                                                                        SyntaxFactory.Parameter(
                                                                            SyntaxFactory.Identifier("v1")),
                                                                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                                        SyntaxFactory.Parameter(
                                                                            SyntaxFactory.Identifier("v2"))})))
                                                        .WithBlock(
                                                            SyntaxFactory.Block(
                                                                SyntaxFactory.SingletonList<StatementSyntax>(
                                                                    SyntaxFactory.ReturnStatement(
                                                                        SyntaxFactory.BinaryExpression(
                                                                            SyntaxKind.AddExpression,
                                                                            SyntaxFactory.BinaryExpression(
                                                                                SyntaxKind.MultiplyExpression,
                                                                                SyntaxFactory.IdentifierName("v1"),
                                                                                SyntaxFactory.IdentifierName("v1")),
                                                                            SyntaxFactory.InvocationExpression(
                                                                                SyntaxFactory.IdentifierName("Add"))
                                                                            .WithArgumentList(
                                                                                SyntaxFactory.ArgumentList(
                                                                                    SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                                                                        new SyntaxNodeOrToken[]{
                                                                                            SyntaxFactory.Argument(
                                                                                                SyntaxFactory.IdentifierName("v2")),
                                                                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                                                            SyntaxFactory.Argument(
                                                                                                SyntaxFactory.IdentifierName("v2"))}))))))))),
                                                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                    SyntaxFactory.Argument(
                                                        SyntaxFactory.InvocationExpression(
                                                            SyntaxFactory.IdentifierName("Add"))
                                                        .WithArgumentList(
                                                            SyntaxFactory.ArgumentList(
                                                                SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                                                    new SyntaxNodeOrToken[]{
                                                                        SyntaxFactory.Argument(
                                                                            SyntaxFactory.LiteralExpression(
                                                                                SyntaxKind.NumericLiteralExpression,
                                                                                SyntaxFactory.Literal(1))),
                                                                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                                        SyntaxFactory.Argument(
                                                                            SyntaxFactory.LiteralExpression(
                                                                                SyntaxKind.NumericLiteralExpression,
                                                                                SyntaxFactory.Literal(2)))})))),
                                                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                    SyntaxFactory.Argument(
                                                        SyntaxFactory.InvocationExpression(
                                                            SyntaxFactory.IdentifierName("Add"))
                                                        .WithArgumentList(
                                                            SyntaxFactory.ArgumentList(
                                                                SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                                                    new SyntaxNodeOrToken[]{
                                                                        SyntaxFactory.Argument(
                                                                            SyntaxFactory.LiteralExpression(
                                                                                SyntaxKind.NumericLiteralExpression,
                                                                                SyntaxFactory.Literal(3))),
                                                                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                                        SyntaxFactory.Argument(
                                                                            SyntaxFactory.InvocationExpression(
                                                                                SyntaxFactory.IdentifierName("Add"))
                                                                            .WithArgumentList(
                                                                                SyntaxFactory.ArgumentList(
                                                                                    SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                                                                        new SyntaxNodeOrToken[]{
                                                                                            SyntaxFactory.Argument(
                                                                                                SyntaxFactory.LiteralExpression(
                                                                                                    SyntaxKind.NumericLiteralExpression,
                                                                                                    SyntaxFactory.Literal(4))),
                                                                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                                                            SyntaxFactory.Argument(
                                                                                                SyntaxFactory.LiteralExpression(
                                                                                                    SyntaxKind.NumericLiteralExpression,
                                                                                                    SyntaxFactory.Literal(5)))}))))}))))}))))))))),
            SyntaxFactory.GlobalStatement(
                SyntaxFactory.LocalFunctionStatement(
                    SyntaxFactory.PredefinedType(
                        SyntaxFactory.Token(SyntaxKind.IntKeyword)),
                    SyntaxFactory.Identifier("Calulate"))
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        SyntaxFactory.Token(SyntaxKind.StaticKeyword)))
                .WithParameterList(
                    SyntaxFactory.ParameterList(
                        SyntaxFactory.SeparatedList<ParameterSyntax>(
                            new SyntaxNodeOrToken[]{
                                SyntaxFactory.Parameter(
                                    SyntaxFactory.Identifier("calulator"))
                                .WithType(
                                    SyntaxFactory.GenericName(
                                        SyntaxFactory.Identifier("Func"))
                                    .WithTypeArgumentList(
                                        SyntaxFactory.TypeArgumentList(
                                            SyntaxFactory.SeparatedList<TypeSyntax>(
                                                new SyntaxNodeOrToken[]{
                                                    SyntaxFactory.PredefinedType(
                                                        SyntaxFactory.Token(SyntaxKind.IntKeyword)),
                                                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                    SyntaxFactory.PredefinedType(
                                                        SyntaxFactory.Token(SyntaxKind.IntKeyword)),
                                                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                    SyntaxFactory.PredefinedType(
                                                        SyntaxFactory.Token(SyntaxKind.IntKeyword))})))),
                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                SyntaxFactory.Parameter(
                                    SyntaxFactory.Identifier("value1"))
                                .WithType(
                                    SyntaxFactory.PredefinedType(
                                        SyntaxFactory.Token(SyntaxKind.IntKeyword))),
                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                SyntaxFactory.Parameter(
                                    SyntaxFactory.Identifier("value2"))
                                .WithType(
                                    SyntaxFactory.PredefinedType(
                                        SyntaxFactory.Token(SyntaxKind.IntKeyword)))})))
                .WithExpressionBody(
                    SyntaxFactory.ArrowExpressionClause(
                        SyntaxFactory.InvocationExpression(
                            SyntaxFactory.IdentifierName("calulator"))
                        .WithArgumentList(
                            SyntaxFactory.ArgumentList(
                                SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                    new SyntaxNodeOrToken[]{
                                        SyntaxFactory.Argument(
                                            SyntaxFactory.IdentifierName("value1")),
                                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                                        SyntaxFactory.Argument(
                                            SyntaxFactory.IdentifierName("value2"))})))))
                .WithSemicolonToken(
                    SyntaxFactory.Token(SyntaxKind.SemicolonToken))),
            SyntaxFactory.GlobalStatement(
                SyntaxFactory.LocalFunctionStatement(
                    SyntaxFactory.PredefinedType(
                        SyntaxFactory.Token(SyntaxKind.IntKeyword)),
                    SyntaxFactory.Identifier("Add"))
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        SyntaxFactory.Token(SyntaxKind.StaticKeyword)))
                .WithParameterList(
                    SyntaxFactory.ParameterList(
                        SyntaxFactory.SeparatedList<ParameterSyntax>(
                            new SyntaxNodeOrToken[]{
                                SyntaxFactory.Parameter(
                                    SyntaxFactory.Identifier("value1"))
                                .WithType(
                                    SyntaxFactory.PredefinedType(
                                        SyntaxFactory.Token(SyntaxKind.IntKeyword))),
                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                SyntaxFactory.Parameter(
                                    SyntaxFactory.Identifier("value2"))
                                .WithType(
                                    SyntaxFactory.PredefinedType(
                                        SyntaxFactory.Token(SyntaxKind.IntKeyword)))})))
                .WithExpressionBody(
                    SyntaxFactory.ArrowExpressionClause(
                        SyntaxFactory.BinaryExpression(
                            SyntaxKind.AddExpression,
                            SyntaxFactory.IdentifierName("value1"),
                            SyntaxFactory.IdentifierName("value2"))))
                .WithSemicolonToken(
                    SyntaxFactory.Token(SyntaxKind.SemicolonToken)))}))
.NormalizeWhitespace()
