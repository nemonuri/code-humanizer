// <auto-generated />
#nullable enable // For CS8669

using Nemonuri.Failures;
using SumSharp;


namespace Nemonuri.Study.CSharpAICommentor;

public static partial class CSharpSyntaxTreeTheory
{
    public partial class CreateCSharpSyntaxTreeFromFileResult :
        IValueOrFailure<Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree, CreateCSharpSyntaxTreeFromFileResult.FailInfo>
    {
        [UnionCase(nameof(FailCode.Canceled))]
        [UnionCase(nameof(FailCode.ReadAllTextFailed), typeof(System.Exception))]
        public partial class FailInfo
        {
            public FailCode FailCode => (FailCode)(Index + 1);
        }

        public enum FailCode
        {
            Unknown = 0,
            Canceled = 1,
            ReadAllTextFailed = 2
        }

        private readonly ValueOrFailure<Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree, FailInfo> _internalSource;

        public CreateCSharpSyntaxTreeFromFileResult(ValueOrFailure<Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree, FailInfo> internalSource)
        {
            _internalSource = internalSource;
            System.Diagnostics.Debug.WriteLine("CreateCSharpSyntaxTreeFromFileResult constructed. " + ToString());
        }

        public static CreateCSharpSyntaxTreeFromFileResult CreateAsValue(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree value) =>
            new(value);
        
        public static CreateCSharpSyntaxTreeFromFileResult CreateAsFailure(FailInfo failInfo, string message = "") =>
            new(FailureTheory.Create(failInfo, message));
        
        public static CreateCSharpSyntaxTreeFromFileResult CreateAsCanceled
        (string message = "") =>
            new(FailureTheory.Create(FailInfo.Canceled, message));

        public static CreateCSharpSyntaxTreeFromFileResult CreateAsReadAllTextFailed
        (System.Exception value, string message = "") =>
            new(FailureTheory.Create(FailInfo.ReadAllTextFailed(value), message));


        public bool IsValue => _internalSource.IsValue;

        public bool IsFailure => _internalSource.IsFailure;

        public Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree GetValue() => _internalSource.GetValue();

        public Failure<FailInfo> GetFailure() => _internalSource.GetFailure();

        public override string ToString() =>
            "CreateCSharpSyntaxTreeFromFileResult {" +
            (
                IsValue ? 
                    ("IsValue = true, Value = " + GetValue()) :
                    ("IsFailure = true, Value = " + GetFailure())
            ) + " }";
    }
}