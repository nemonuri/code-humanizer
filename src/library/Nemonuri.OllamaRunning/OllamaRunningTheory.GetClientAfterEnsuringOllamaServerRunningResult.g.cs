// <auto-generated />

using Nemonuri.Failures;
using SumSharp;


namespace Nemonuri.OllamaRunning;

public static partial class OllamaRunningTheory
{
    public partial class GetClientAfterEnsuringOllamaServerRunningResult :
        IValueOrFailure<object, GetClientAfterEnsuringOllamaServerRunningResult.FailInfo>
    {
        [UnionCase(nameof(FailCode.Canceled))]
        [UnionCase(nameof(FailCode.GetOllamaServerVersionFailed), typeof(GetOllamaServerVersionResult.FailInfo))]
        public partial struct FailInfo
        {
            public readonly FailCode FailCode => (FailCode)(Index + 1);
        }

        public enum FailCode
        {
            Unknown = 0,
            Canceled = 1,
            GetOllamaServerVersionFailed = 2
        }

        private readonly ValueOrFailure<object, FailInfo> _internalSource;

        public GetClientAfterEnsuringOllamaServerRunningResult(ValueOrFailure<object, FailInfo> internalSource)
        {
            _internalSource = internalSource;
        }

        public static GetClientAfterEnsuringOllamaServerRunningResult CreateAsValue(object value) =>
            new(value);
        
        public static GetClientAfterEnsuringOllamaServerRunningResult CreateAsFailure(FailInfo failInfo, string message = "") =>
            new(FailureTheory.Create(failInfo, message));
        
        public static GetClientAfterEnsuringOllamaServerRunningResult CreateAsGetOllamaServerVersionFailed
        (GetOllamaServerVersionResult.FailInfo value, string message = "") =>
            new(FailureTheory.Create(FailInfo.GetOllamaServerVersionFailed(value), message));


        public bool IsValue => _internalSource.IsValue;

        public bool IsFailure => _internalSource.IsFailure;

        public object GetValue() => _internalSource.GetValue();

        public Failure<FailInfo> GetFailure() => _internalSource.GetFailure();

    }
}