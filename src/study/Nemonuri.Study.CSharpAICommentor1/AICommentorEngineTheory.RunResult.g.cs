// <auto-generated />
#nullable enable // For CS8669

using Nemonuri.Failures;
using SumSharp;


namespace Nemonuri.Study.CSharpAICommentor1;

public static partial class AICommentorEngineTheory
{
    public partial class RunResult :
        IValueOrFailure<string, RunResult.FailInfo>
    {
        [UnionCase(nameof(FailCode.Canceled))]
        [UnionCase(nameof(FailCode.CreateCompilationUnitRootedCSharpSyntaxTreeInfoFailed), typeof(Nemonuri.Study.CSharpAICommentor.CSharpSyntaxTreeTheory.CreateCompilationUnitRootedCSharpSyntaxTreeInfoResult.FailInfo))]
        [UnionCase(nameof(FailCode.IsMissing))]
        [UnionCase(nameof(FailCode.GetClientAfterEnsuringOllamaServerRunningFailed), typeof(Nemonuri.OllamaRunning.OllamaRunningTheory.GetClientAfterEnsuringOllamaServerRunningResult.FailInfo))]
        public partial class FailInfo
        {
            public FailCode FailCode => (FailCode)(Index + 1);
        }

        public enum FailCode
        {
            Unknown = 0,
            Canceled = 1,
            CreateCompilationUnitRootedCSharpSyntaxTreeInfoFailed = 2,
            IsMissing = 3,
            GetClientAfterEnsuringOllamaServerRunningFailed = 4
        }

        private readonly ValueOrFailure<string, FailInfo> _internalSource;

        public RunResult(ValueOrFailure<string, FailInfo> internalSource)
        {
            _internalSource = internalSource;
            System.Diagnostics.Debug.WriteLine("RunResult constructed. " + ToString());
        }

        public static RunResult CreateAsValue(string value) =>
            new(value);
        
        public static RunResult CreateAsFailure(FailInfo failInfo, string message = "") =>
            new(FailureTheory.Create(failInfo, message));
        
        public static RunResult CreateAsCanceled
        (string message = "") =>
            new(FailureTheory.Create(FailInfo.Canceled, message));

        public static RunResult CreateAsCreateCompilationUnitRootedCSharpSyntaxTreeInfoFailed
        (Nemonuri.Study.CSharpAICommentor.CSharpSyntaxTreeTheory.CreateCompilationUnitRootedCSharpSyntaxTreeInfoResult.FailInfo value, string message = "") =>
            new(FailureTheory.Create(FailInfo.CreateCompilationUnitRootedCSharpSyntaxTreeInfoFailed(value), message));

        public static RunResult CreateAsIsMissing
        (string message = "") =>
            new(FailureTheory.Create(FailInfo.IsMissing, message));

        public static RunResult CreateAsGetClientAfterEnsuringOllamaServerRunningFailed
        (Nemonuri.OllamaRunning.OllamaRunningTheory.GetClientAfterEnsuringOllamaServerRunningResult.FailInfo value, string message = "") =>
            new(FailureTheory.Create(FailInfo.GetClientAfterEnsuringOllamaServerRunningFailed(value), message));


        public bool IsValue => _internalSource.IsValue;

        public bool IsFailure => _internalSource.IsFailure;

        public string GetValue() => _internalSource.GetValue();

        public Failure<FailInfo> GetFailure() => _internalSource.GetFailure();

        public override string ToString() =>
            "RunResult {" +
            (
                IsValue ? 
                    ("IsValue = true, Value = " + GetValue()) :
                    ("IsFailure = true, Value = " + GetFailure())
            ) + " }";
    }
}