IndexSequence { [0,0], Count = 2 }, Kind = UsingKeyword, {using}
IndexSequence { [0,1,0,0], Count = 4 }, Kind = IdentifierToken, {System}
IndexSequence { [0,1,0], Count = 3 }, Kind = IdentifierName, {System}
IndexSequence { [0,1,1], Count = 3 }, Kind = DotToken, {.}
IndexSequence { [0,1,2,0], Count = 4 }, Kind = IdentifierToken, {Diagnostics}
IndexSequence { [0,1,2], Count = 3 }, Kind = IdentifierName, {Diagnostics}
IndexSequence { [0,1], Count = 2 }, Kind = QualifiedName, {System.Diagnostics}
IndexSequence { [0,2], Count = 2 }, Kind = SemicolonToken, {;}
IndexSequence { [0], Count = 1 }, Kind = UsingDirective, {using System.Diagnostics;}
IndexSequence { [1,0], Count = 2 }, Kind = NamespaceKeyword, {namespace}
IndexSequence { [1,1,0,0,0], Count = 5 }, Kind = IdentifierToken, {System}
IndexSequence { [1,1,0,0], Count = 4 }, Kind = IdentifierName, {System}
IndexSequence { [1,1,0,1], Count = 4 }, Kind = DotToken, {.}
IndexSequence { [1,1,0,2,0], Count = 5 }, Kind = IdentifierToken, {Collections}
IndexSequence { [1,1,0,2], Count = 4 }, Kind = IdentifierName, {Collections}
IndexSequence { [1,1,0], Count = 3 }, Kind = QualifiedName, {System.Collections}
IndexSequence { [1,1,1], Count = 3 }, Kind = DotToken, {.}
IndexSequence { [1,1,2,0], Count = 4 }, Kind = IdentifierToken, {Generic}
IndexSequence { [1,1,2], Count = 3 }, Kind = IdentifierName, {Generic}
IndexSequence { [1,1], Count = 2 }, Kind = QualifiedName, {System.Collections.Generic}
IndexSequence { [1,2], Count = 2 }, Kind = OpenBraceToken, {{}
IndexSequence { [1,3,0], Count = 3 }, Kind = InternalKeyword, {internal}
IndexSequence { [1,3,1], Count = 3 }, Kind = SealedKeyword, {sealed}
IndexSequence { [1,3,2], Count = 3 }, Kind = ClassKeyword, {class}
IndexSequence { [1,3,3], Count = 3 }, Kind = IdentifierToken, {ICollectionDebugView}
IndexSequence { [1,3,4,0], Count = 4 }, Kind = LessThanToken, {<}
IndexSequence { [1,3,4,1,0], Count = 5 }, Kind = IdentifierToken, {T}
IndexSequence { [1,3,4,1], Count = 4 }, Kind = TypeParameter, {T}
IndexSequence { [1,3,4,2], Count = 4 }, Kind = GreaterThanToken, {>}
IndexSequence { [1,3,4], Count = 3 }, Kind = TypeParameterList, {<T>}
IndexSequence { [1,3,5], Count = 3 }, Kind = OpenBraceToken, {{}
IndexSequence { [1,3,6,0], Count = 4 }, Kind = PrivateKeyword, {private}
IndexSequence { [1,3,6,1], Count = 4 }, Kind = ReadOnlyKeyword, {readonly}
IndexSequence { [1,3,6,2,0,0], Count = 6 }, Kind = IdentifierToken, {ICollection}
IndexSequence { [1,3,6,2,0,1,0], Count = 7 }, Kind = LessThanToken, {<}
IndexSequence { [1,3,6,2,0,1,1,0], Count = 8 }, Kind = IdentifierToken, {T}
IndexSequence { [1,3,6,2,0,1,1], Count = 7 }, Kind = IdentifierName, {T}
IndexSequence { [1,3,6,2,0,1,2], Count = 7 }, Kind = GreaterThanToken, {>}
IndexSequence { [1,3,6,2,0,1], Count = 6 }, Kind = TypeArgumentList, {<T>}
IndexSequence { [1,3,6,2,0], Count = 5 }, Kind = GenericName, {ICollection<T>}
IndexSequence { [1,3,6,2,1,0], Count = 6 }, Kind = IdentifierToken, {_collection}
IndexSequence { [1,3,6,2,1], Count = 5 }, Kind = VariableDeclarator, {_collection}
IndexSequence { [1,3,6,2], Count = 4 }, Kind = VariableDeclaration, {ICollection<T> _collection}
IndexSequence { [1,3,6,3], Count = 4 }, Kind = SemicolonToken, {;}
IndexSequence { [1,3,6], Count = 3 }, Kind = FieldDeclaration, {private readonly ICollection<T> _collection;}
IndexSequence { [1,3,7,0], Count = 4 }, Kind = PublicKeyword, {public}
IndexSequence { [1,3,7,1], Count = 4 }, Kind = IdentifierToken, {ICollectionDebugView}
IndexSequence { [1,3,7,2,0], Count = 5 }, Kind = OpenParenToken, {(}
IndexSequence { [1,3,7,2,1,0,0], Count = 7 }, Kind = IdentifierToken, {ICollection}
IndexSequence { [1,3,7,2,1,0,1,0], Count = 8 }, Kind = LessThanToken, {<}
IndexSequence { [1,3,7,2,1,0,1,1,0], Count = 9 }, Kind = IdentifierToken, {T}
IndexSequence { [1,3,7,2,1,0,1,1], Count = 8 }, Kind = IdentifierName, {T}
IndexSequence { [1,3,7,2,1,0,1,2], Count = 8 }, Kind = GreaterThanToken, {>}
IndexSequence { [1,3,7,2,1,0,1], Count = 7 }, Kind = TypeArgumentList, {<T>}
IndexSequence { [1,3,7,2,1,0], Count = 6 }, Kind = GenericName, {ICollection<T>}
IndexSequence { [1,3,7,2,1,1], Count = 6 }, Kind = IdentifierToken, {collection}
IndexSequence { [1,3,7,2,1], Count = 5 }, Kind = Parameter, {ICollection<T> collection}
IndexSequence { [1,3,7,2,2], Count = 5 }, Kind = CloseParenToken, {)}
IndexSequence { [1,3,7,2], Count = 4 }, Kind = ParameterList, {(ICollection<T> collection)}
IndexSequence { [1,3,7,3,0], Count = 5 }, Kind = OpenBraceToken, {{}
IndexSequence { [1,3,7,3,1,0,0,0,0], Count = 9 }, Kind = IdentifierToken, {ArgumentNullException}
IndexSequence { [1,3,7,3,1,0,0,0], Count = 8 }, Kind = IdentifierName, {ArgumentNullException}
IndexSequence { [1,3,7,3,1,0,0,1], Count = 8 }, Kind = DotToken, {.}
IndexSequence { [1,3,7,3,1,0,0,2,0], Count = 9 }, Kind = IdentifierToken, {ThrowIfNull}
IndexSequence { [1,3,7,3,1,0,0,2], Count = 8 }, Kind = IdentifierName, {ThrowIfNull}
IndexSequence { [1,3,7,3,1,0,0], Count = 7 }, Kind = SimpleMemberAccessExpression, {ArgumentNullException.ThrowIfNull}
IndexSequence { [1,3,7,3,1,0,1,0], Count = 8 }, Kind = OpenParenToken, {(}
IndexSequence { [1,3,7,3,1,0,1,1,0,0], Count = 10 }, Kind = IdentifierToken, {collection}
IndexSequence { [1,3,7,3,1,0,1,1,0], Count = 9 }, Kind = IdentifierName, {collection}
IndexSequence { [1,3,7,3,1,0,1,1], Count = 8 }, Kind = Argument, {collection}
IndexSequence { [1,3,7,3,1,0,1,2], Count = 8 }, Kind = CloseParenToken, {)}
IndexSequence { [1,3,7,3,1,0,1], Count = 7 }, Kind = ArgumentList, {(collection)}
IndexSequence { [1,3,7,3,1,0], Count = 6 }, Kind = InvocationExpression, {ArgumentNullException.ThrowIfNull(collection)}
IndexSequence { [1,3,7,3,1,1], Count = 6 }, Kind = SemicolonToken, {;}
IndexSequence { [1,3,7,3,1], Count = 5 }, Kind = ExpressionStatement, {ArgumentNullException.ThrowIfNull(collection);}
IndexSequence { [1,3,7,3,2,0,0,0], Count = 8 }, Kind = IdentifierToken, {_collection}
IndexSequence { [1,3,7,3,2,0,0], Count = 7 }, Kind = IdentifierName, {_collection}
IndexSequence { [1,3,7,3,2,0,1], Count = 7 }, Kind = EqualsToken, {=}
IndexSequence { [1,3,7,3,2,0,2,0], Count = 8 }, Kind = IdentifierToken, {collection}
IndexSequence { [1,3,7,3,2,0,2], Count = 7 }, Kind = IdentifierName, {collection}
IndexSequence { [1,3,7,3,2,0], Count = 6 }, Kind = SimpleAssignmentExpression, {_collection = collection}
IndexSequence { [1,3,7,3,2,1], Count = 6 }, Kind = SemicolonToken, {;}
IndexSequence { [1,3,7,3,2], Count = 5 }, Kind = ExpressionStatement, {_collection = collection;}
IndexSequence { [1,3,7,3,3], Count = 5 }, Kind = CloseBraceToken, {}}
IndexSequence { [1,3,7,3], Count = 4 }, Kind = Block, {{
            ArgumentNullException.ThrowIfNull(collection);

            _collection = collection;
        }}
IndexSequence { [1,3,7], Count = 3 }, Kind = ConstructorDeclaration, {public ICollectionDebugView(ICollection<T> collection)
        {
            ArgumentNullException.ThrowIfNull(collection);

            _collection = collection;
        }}
IndexSequence { [1,3,8,0,0], Count = 5 }, Kind = OpenBracketToken, {[}
IndexSequence { [1,3,8,0,1,0,0], Count = 7 }, Kind = IdentifierToken, {DebuggerBrowsable}
IndexSequence { [1,3,8,0,1,0], Count = 6 }, Kind = IdentifierName, {DebuggerBrowsable}
IndexSequence { [1,3,8,0,1,1,0], Count = 7 }, Kind = OpenParenToken, {(}
IndexSequence { [1,3,8,0,1,1,1,0,0,0], Count = 10 }, Kind = IdentifierToken, {DebuggerBrowsableState}
IndexSequence { [1,3,8,0,1,1,1,0,0], Count = 9 }, Kind = IdentifierName, {DebuggerBrowsableState}
IndexSequence { [1,3,8,0,1,1,1,0,1], Count = 9 }, Kind = DotToken, {.}
IndexSequence { [1,3,8,0,1,1,1,0,2,0], Count = 10 }, Kind = IdentifierToken, {RootHidden}
IndexSequence { [1,3,8,0,1,1,1,0,2], Count = 9 }, Kind = IdentifierName, {RootHidden}
IndexSequence { [1,3,8,0,1,1,1,0], Count = 8 }, Kind = SimpleMemberAccessExpression, {DebuggerBrowsableState.RootHidden}
IndexSequence { [1,3,8,0,1,1,1], Count = 7 }, Kind = AttributeArgument, {DebuggerBrowsableState.RootHidden}
IndexSequence { [1,3,8,0,1,1,2], Count = 7 }, Kind = CloseParenToken, {)}
IndexSequence { [1,3,8,0,1,1], Count = 6 }, Kind = AttributeArgumentList, {(DebuggerBrowsableState.RootHidden)}
IndexSequence { [1,3,8,0,1], Count = 5 }, Kind = Attribute, {DebuggerBrowsable(DebuggerBrowsableState.RootHidden)}
IndexSequence { [1,3,8,0,2], Count = 5 }, Kind = CloseBracketToken, {]}
IndexSequence { [1,3,8,0], Count = 4 }, Kind = AttributeList, {[DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]}
IndexSequence { [1,3,8,1], Count = 4 }, Kind = PublicKeyword, {public}
IndexSequence { [1,3,8,2,0,0], Count = 6 }, Kind = IdentifierToken, {T}
IndexSequence { [1,3,8,2,0], Count = 5 }, Kind = IdentifierName, {T}
IndexSequence { [1,3,8,2,1,0], Count = 6 }, Kind = OpenBracketToken, {[}
IndexSequence { [1,3,8,2,1,1,0], Count = 7 }, Kind = OmittedArraySizeExpressionToken, {}
IndexSequence { [1,3,8,2,1,1], Count = 6 }, Kind = OmittedArraySizeExpression, {}
IndexSequence { [1,3,8,2,1,2], Count = 6 }, Kind = CloseBracketToken, {]}
IndexSequence { [1,3,8,2,1], Count = 5 }, Kind = ArrayRankSpecifier, {[]}
IndexSequence { [1,3,8,2], Count = 4 }, Kind = ArrayType, {T[]}
IndexSequence { [1,3,8,3], Count = 4 }, Kind = IdentifierToken, {Items}
IndexSequence { [1,3,8,4,0], Count = 5 }, Kind = OpenBraceToken, {{}
IndexSequence { [1,3,8,4,1,0], Count = 6 }, Kind = GetKeyword, {get}
IndexSequence { [1,3,8,4,1,1,0], Count = 7 }, Kind = OpenBraceToken, {{}
IndexSequence { [1,3,8,4,1,1,1,0,0,0,0], Count = 11 }, Kind = IdentifierToken, {T}
IndexSequence { [1,3,8,4,1,1,1,0,0,0], Count = 10 }, Kind = IdentifierName, {T}
IndexSequence { [1,3,8,4,1,1,1,0,0,1,0], Count = 11 }, Kind = OpenBracketToken, {[}
IndexSequence { [1,3,8,4,1,1,1,0,0,1,1,0], Count = 12 }, Kind = OmittedArraySizeExpressionToken, {}
IndexSequence { [1,3,8,4,1,1,1,0,0,1,1], Count = 11 }, Kind = OmittedArraySizeExpression, {}
IndexSequence { [1,3,8,4,1,1,1,0,0,1,2], Count = 11 }, Kind = CloseBracketToken, {]}
IndexSequence { [1,3,8,4,1,1,1,0,0,1], Count = 10 }, Kind = ArrayRankSpecifier, {[]}
IndexSequence { [1,3,8,4,1,1,1,0,0], Count = 9 }, Kind = ArrayType, {T[]}
IndexSequence { [1,3,8,4,1,1,1,0,1,0], Count = 10 }, Kind = IdentifierToken, {items}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,0], Count = 11 }, Kind = EqualsToken, {=}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,0], Count = 12 }, Kind = NewKeyword, {new}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1,0,0], Count = 14 }, Kind = IdentifierToken, {T}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1,0], Count = 13 }, Kind = IdentifierName, {T}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1,1,0], Count = 14 }, Kind = OpenBracketToken, {[}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1,1,1,0,0], Count = 16 }, Kind = IdentifierToken, {_collection}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1,1,1,0], Count = 15 }, Kind = IdentifierName, {_collection}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1,1,1,1], Count = 15 }, Kind = DotToken, {.}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1,1,1,2,0], Count = 16 }, Kind = IdentifierToken, {Count}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1,1,1,2], Count = 15 }, Kind = IdentifierName, {Count}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1,1,1], Count = 14 }, Kind = SimpleMemberAccessExpression, {_collection.Count}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1,1,2], Count = 14 }, Kind = CloseBracketToken, {]}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1,1], Count = 13 }, Kind = ArrayRankSpecifier, {[_collection.Count]}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1,1], Count = 12 }, Kind = ArrayType, {T[_collection.Count]}
IndexSequence { [1,3,8,4,1,1,1,0,1,1,1], Count = 11 }, Kind = ArrayCreationExpression, {new T[_collection.Count]}
IndexSequence { [1,3,8,4,1,1,1,0,1,1], Count = 10 }, Kind = EqualsValueClause, {= new T[_collection.Count]}
IndexSequence { [1,3,8,4,1,1,1,0,1], Count = 9 }, Kind = VariableDeclarator, {items = new T[_collection.Count]}
IndexSequence { [1,3,8,4,1,1,1,0], Count = 8 }, Kind = VariableDeclaration, {T[] items = new T[_collection.Count]}
IndexSequence { [1,3,8,4,1,1,1,1], Count = 8 }, Kind = SemicolonToken, {;}
IndexSequence { [1,3,8,4,1,1,1], Count = 7 }, Kind = LocalDeclarationStatement, {T[] items = new T[_collection.Count];}
IndexSequence { [1,3,8,4,1,1,2,0,0,0,0], Count = 11 }, Kind = IdentifierToken, {_collection}
IndexSequence { [1,3,8,4,1,1,2,0,0,0], Count = 10 }, Kind = IdentifierName, {_collection}
IndexSequence { [1,3,8,4,1,1,2,0,0,1], Count = 10 }, Kind = DotToken, {.}
IndexSequence { [1,3,8,4,1,1,2,0,0,2,0], Count = 11 }, Kind = IdentifierToken, {CopyTo}
IndexSequence { [1,3,8,4,1,1,2,0,0,2], Count = 10 }, Kind = IdentifierName, {CopyTo}
IndexSequence { [1,3,8,4,1,1,2,0,0], Count = 9 }, Kind = SimpleMemberAccessExpression, {_collection.CopyTo}
IndexSequence { [1,3,8,4,1,1,2,0,1,0], Count = 10 }, Kind = OpenParenToken, {(}
IndexSequence { [1,3,8,4,1,1,2,0,1,1,0,0], Count = 12 }, Kind = IdentifierToken, {items}
IndexSequence { [1,3,8,4,1,1,2,0,1,1,0], Count = 11 }, Kind = IdentifierName, {items}
IndexSequence { [1,3,8,4,1,1,2,0,1,1], Count = 10 }, Kind = Argument, {items}
IndexSequence { [1,3,8,4,1,1,2,0,1,2], Count = 10 }, Kind = CommaToken, {,}
IndexSequence { [1,3,8,4,1,1,2,0,1,3,0,0], Count = 12 }, Kind = NumericLiteralToken, {0}
IndexSequence { [1,3,8,4,1,1,2,0,1,3,0], Count = 11 }, Kind = NumericLiteralExpression, {0}
IndexSequence { [1,3,8,4,1,1,2,0,1,3], Count = 10 }, Kind = Argument, {0}
IndexSequence { [1,3,8,4,1,1,2,0,1,4], Count = 10 }, Kind = CloseParenToken, {)}
IndexSequence { [1,3,8,4,1,1,2,0,1], Count = 9 }, Kind = ArgumentList, {(items, 0)}
IndexSequence { [1,3,8,4,1,1,2,0], Count = 8 }, Kind = InvocationExpression, {_collection.CopyTo(items, 0)}
IndexSequence { [1,3,8,4,1,1,2,1], Count = 8 }, Kind = SemicolonToken, {;}
IndexSequence { [1,3,8,4,1,1,2], Count = 7 }, Kind = ExpressionStatement, {_collection.CopyTo(items, 0);}
IndexSequence { [1,3,8,4,1,1,3,0], Count = 8 }, Kind = ReturnKeyword, {return}
IndexSequence { [1,3,8,4,1,1,3,1,0], Count = 9 }, Kind = IdentifierToken, {items}
IndexSequence { [1,3,8,4,1,1,3,1], Count = 8 }, Kind = IdentifierName, {items}
IndexSequence { [1,3,8,4,1,1,3,2], Count = 8 }, Kind = SemicolonToken, {;}
IndexSequence { [1,3,8,4,1,1,3], Count = 7 }, Kind = ReturnStatement, {return items;}
IndexSequence { [1,3,8,4,1,1,4], Count = 7 }, Kind = CloseBraceToken, {}}
IndexSequence { [1,3,8,4,1,1], Count = 6 }, Kind = Block, {{
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }}
IndexSequence { [1,3,8,4,1], Count = 5 }, Kind = GetAccessorDeclaration, {get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }}
IndexSequence { [1,3,8,4,2], Count = 5 }, Kind = CloseBraceToken, {}}
IndexSequence { [1,3,8,4], Count = 4 }, Kind = AccessorList, {{
            get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }
        }}
IndexSequence { [1,3,8], Count = 3 }, Kind = PropertyDeclaration, {[DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
        public T[] Items
        {
            get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }
        }}
IndexSequence { [1,3,9], Count = 3 }, Kind = CloseBraceToken, {}}
IndexSequence { [1,3], Count = 2 }, Kind = ClassDeclaration, {internal sealed class ICollectionDebugView<T>
    {
        private readonly ICollection<T> _collection;

        public ICollectionDebugView(ICollection<T> collection)
        {
            ArgumentNullException.ThrowIfNull(collection);

            _collection = collection;
        }

        [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
        public T[] Items
        {
            get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }
        }
    }}
IndexSequence { [1,4], Count = 2 }, Kind = CloseBraceToken, {}}
IndexSequence { [1], Count = 1 }, Kind = NamespaceDeclaration, {namespace System.Collections.Generic
{
    internal sealed class ICollectionDebugView<T>
    {
        private readonly ICollection<T> _collection;

        public ICollectionDebugView(ICollection<T> collection)
        {
            ArgumentNullException.ThrowIfNull(collection);

            _collection = collection;
        }

        [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
        public T[] Items
        {
            get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }
        }
    }
}}
IndexSequence { [2], Count = 1 }, Kind = EndOfFileToken, {}
IndexSequence { [], Count = 0 }, Kind = CompilationUnit, {using System.Diagnostics;

namespace System.Collections.Generic
{
    internal sealed class ICollectionDebugView<T>
    {
        private readonly ICollection<T> _collection;

        public ICollectionDebugView(ICollection<T> collection)
        {
            ArgumentNullException.ThrowIfNull(collection);

            _collection = collection;
        }

        [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
        public T[] Items
        {
            get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }
        }
    }
}}

