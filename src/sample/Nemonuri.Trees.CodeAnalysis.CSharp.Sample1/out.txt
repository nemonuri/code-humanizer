[0,0], Kind = UsingKeyword, {using}
[0,1,0,0], Kind = IdentifierToken, {System}
[0,1,0], Kind = IdentifierName, {System}
[0,1,1], Kind = DotToken, {.}
[0,1,2,0], Kind = IdentifierToken, {Diagnostics}
[0,1,2], Kind = IdentifierName, {Diagnostics}
[0,1], Kind = QualifiedName, {System.Diagnostics}
[0,2], Kind = SemicolonToken, {;}
[0], Kind = UsingDirective, {using System.Diagnostics;}
[1,0], Kind = NamespaceKeyword, {namespace}
[1,1,0,0,0], Kind = IdentifierToken, {System}
[1,1,0,0], Kind = IdentifierName, {System}
[1,1,0,1], Kind = DotToken, {.}
[1,1,0,2,0], Kind = IdentifierToken, {Collections}
[1,1,0,2], Kind = IdentifierName, {Collections}
[1,1,0], Kind = QualifiedName, {System.Collections}
[1,1,1], Kind = DotToken, {.}
[1,1,2,0], Kind = IdentifierToken, {Generic}
[1,1,2], Kind = IdentifierName, {Generic}
[1,1], Kind = QualifiedName, {System.Collections.Generic}
[1,2], Kind = OpenBraceToken, {{}
[1,3,0], Kind = InternalKeyword, {internal}
[1,3,1], Kind = SealedKeyword, {sealed}
[1,3,2], Kind = ClassKeyword, {class}
[1,3,3], Kind = IdentifierToken, {ICollectionDebugView}
[1,3,4,0], Kind = LessThanToken, {<}
[1,3,4,1,0], Kind = IdentifierToken, {T}
[1,3,4,1], Kind = TypeParameter, {T}
[1,3,4,2], Kind = GreaterThanToken, {>}
[1,3,4], Kind = TypeParameterList, {<T>}
[1,3,5], Kind = OpenBraceToken, {{}
[1,3,6,0], Kind = PrivateKeyword, {private}
[1,3,6,1], Kind = ReadOnlyKeyword, {readonly}
[1,3,6,2,0,0], Kind = IdentifierToken, {ICollection}
[1,3,6,2,0,1,0], Kind = LessThanToken, {<}
[1,3,6,2,0,1,1,0], Kind = IdentifierToken, {T}
[1,3,6,2,0,1,1], Kind = IdentifierName, {T}
[1,3,6,2,0,1,2], Kind = GreaterThanToken, {>}
[1,3,6,2,0,1], Kind = TypeArgumentList, {<T>}
[1,3,6,2,0], Kind = GenericName, {ICollection<T>}
[1,3,6,2,1,0], Kind = IdentifierToken, {_collection}
[1,3,6,2,1], Kind = VariableDeclarator, {_collection}
[1,3,6,2], Kind = VariableDeclaration, {ICollection<T> _collection}
[1,3,6,3], Kind = SemicolonToken, {;}
[1,3,6], Kind = FieldDeclaration, {private readonly ICollection<T> _collection;}
[1,3,7,0], Kind = PublicKeyword, {public}
[1,3,7,1], Kind = IdentifierToken, {ICollectionDebugView}
[1,3,7,2,0], Kind = OpenParenToken, {(}
[1,3,7,2,1,0,0], Kind = IdentifierToken, {ICollection}
[1,3,7,2,1,0,1,0], Kind = LessThanToken, {<}
[1,3,7,2,1,0,1,1,0], Kind = IdentifierToken, {T}
[1,3,7,2,1,0,1,1], Kind = IdentifierName, {T}
[1,3,7,2,1,0,1,2], Kind = GreaterThanToken, {>}
[1,3,7,2,1,0,1], Kind = TypeArgumentList, {<T>}
[1,3,7,2,1,0], Kind = GenericName, {ICollection<T>}
[1,3,7,2,1,1], Kind = IdentifierToken, {collection}
[1,3,7,2,1], Kind = Parameter, {ICollection<T> collection}
[1,3,7,2,2], Kind = CloseParenToken, {)}
[1,3,7,2], Kind = ParameterList, {(ICollection<T> collection)}
[1,3,7,3,0], Kind = OpenBraceToken, {{}
[1,3,7,3,1,0,0,0,0], Kind = IdentifierToken, {ArgumentNullException}
[1,3,7,3,1,0,0,0], Kind = IdentifierName, {ArgumentNullException}
[1,3,7,3,1,0,0,1], Kind = DotToken, {.}
[1,3,7,3,1,0,0,2,0], Kind = IdentifierToken, {ThrowIfNull}
[1,3,7,3,1,0,0,2], Kind = IdentifierName, {ThrowIfNull}
[1,3,7,3,1,0,0], Kind = SimpleMemberAccessExpression, {ArgumentNullException.ThrowIfNull}
[1,3,7,3,1,0,1,0], Kind = OpenParenToken, {(}
[1,3,7,3,1,0,1,1,0,0], Kind = IdentifierToken, {collection}
[1,3,7,3,1,0,1,1,0], Kind = IdentifierName, {collection}
[1,3,7,3,1,0,1,1], Kind = Argument, {collection}
[1,3,7,3,1,0,1,2], Kind = CloseParenToken, {)}
[1,3,7,3,1,0,1], Kind = ArgumentList, {(collection)}
[1,3,7,3,1,0], Kind = InvocationExpression, {ArgumentNullException.ThrowIfNull(collection)}
[1,3,7,3,1,1], Kind = SemicolonToken, {;}
[1,3,7,3,1], Kind = ExpressionStatement, {ArgumentNullException.ThrowIfNull(collection);}
[1,3,7,3,2,0,0,0], Kind = IdentifierToken, {_collection}
[1,3,7,3,2,0,0], Kind = IdentifierName, {_collection}
[1,3,7,3,2,0,1], Kind = EqualsToken, {=}
[1,3,7,3,2,0,2,0], Kind = IdentifierToken, {collection}
[1,3,7,3,2,0,2], Kind = IdentifierName, {collection}
[1,3,7,3,2,0], Kind = SimpleAssignmentExpression, {_collection = collection}
[1,3,7,3,2,1], Kind = SemicolonToken, {;}
[1,3,7,3,2], Kind = ExpressionStatement, {_collection = collection;}
[1,3,7,3,3], Kind = CloseBraceToken, {}}
[1,3,7,3], Kind = Block, {{
            ArgumentNullException.ThrowIfNull(collection);

            _collection = collection;
        }}
[1,3,7], Kind = ConstructorDeclaration, {public ICollectionDebugView(ICollection<T> collection)
        {
            ArgumentNullException.ThrowIfNull(collection);

            _collection = collection;
        }}
[1,3,8,0,0], Kind = OpenBracketToken, {[}
[1,3,8,0,1,0,0], Kind = IdentifierToken, {DebuggerBrowsable}
[1,3,8,0,1,0], Kind = IdentifierName, {DebuggerBrowsable}
[1,3,8,0,1,1,0], Kind = OpenParenToken, {(}
[1,3,8,0,1,1,1,0,0,0], Kind = IdentifierToken, {DebuggerBrowsableState}
[1,3,8,0,1,1,1,0,0], Kind = IdentifierName, {DebuggerBrowsableState}
[1,3,8,0,1,1,1,0,1], Kind = DotToken, {.}
[1,3,8,0,1,1,1,0,2,0], Kind = IdentifierToken, {RootHidden}
[1,3,8,0,1,1,1,0,2], Kind = IdentifierName, {RootHidden}
[1,3,8,0,1,1,1,0], Kind = SimpleMemberAccessExpression, {DebuggerBrowsableState.RootHidden}
[1,3,8,0,1,1,1], Kind = AttributeArgument, {DebuggerBrowsableState.RootHidden}
[1,3,8,0,1,1,2], Kind = CloseParenToken, {)}
[1,3,8,0,1,1], Kind = AttributeArgumentList, {(DebuggerBrowsableState.RootHidden)}
[1,3,8,0,1], Kind = Attribute, {DebuggerBrowsable(DebuggerBrowsableState.RootHidden)}
[1,3,8,0,2], Kind = CloseBracketToken, {]}
[1,3,8,0], Kind = AttributeList, {[DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]}
[1,3,8,1], Kind = PublicKeyword, {public}
[1,3,8,2,0,0], Kind = IdentifierToken, {T}
[1,3,8,2,0], Kind = IdentifierName, {T}
[1,3,8,2,1,0], Kind = OpenBracketToken, {[}
[1,3,8,2,1,1,0], Kind = OmittedArraySizeExpressionToken, {}
[1,3,8,2,1,1], Kind = OmittedArraySizeExpression, {}
[1,3,8,2,1,2], Kind = CloseBracketToken, {]}
[1,3,8,2,1], Kind = ArrayRankSpecifier, {[]}
[1,3,8,2], Kind = ArrayType, {T[]}
[1,3,8,3], Kind = IdentifierToken, {Items}
[1,3,8,4,0], Kind = OpenBraceToken, {{}
[1,3,8,4,1,0], Kind = GetKeyword, {get}
[1,3,8,4,1,1,0], Kind = OpenBraceToken, {{}
[1,3,8,4,1,1,1,0,0,0,0], Kind = IdentifierToken, {T}
[1,3,8,4,1,1,1,0,0,0], Kind = IdentifierName, {T}
[1,3,8,4,1,1,1,0,0,1,0], Kind = OpenBracketToken, {[}
[1,3,8,4,1,1,1,0,0,1,1,0], Kind = OmittedArraySizeExpressionToken, {}
[1,3,8,4,1,1,1,0,0,1,1], Kind = OmittedArraySizeExpression, {}
[1,3,8,4,1,1,1,0,0,1,2], Kind = CloseBracketToken, {]}
[1,3,8,4,1,1,1,0,0,1], Kind = ArrayRankSpecifier, {[]}
[1,3,8,4,1,1,1,0,0], Kind = ArrayType, {T[]}
[1,3,8,4,1,1,1,0,1,0], Kind = IdentifierToken, {items}
[1,3,8,4,1,1,1,0,1,1,0], Kind = EqualsToken, {=}
[1,3,8,4,1,1,1,0,1,1,1,0], Kind = NewKeyword, {new}
[1,3,8,4,1,1,1,0,1,1,1,1,0,0], Kind = IdentifierToken, {T}
[1,3,8,4,1,1,1,0,1,1,1,1,0], Kind = IdentifierName, {T}
[1,3,8,4,1,1,1,0,1,1,1,1,1,0], Kind = OpenBracketToken, {[}
[1,3,8,4,1,1,1,0,1,1,1,1,1,1,0,0], Kind = IdentifierToken, {_collection}
[1,3,8,4,1,1,1,0,1,1,1,1,1,1,0], Kind = IdentifierName, {_collection}
[1,3,8,4,1,1,1,0,1,1,1,1,1,1,1], Kind = DotToken, {.}
[1,3,8,4,1,1,1,0,1,1,1,1,1,1,2,0], Kind = IdentifierToken, {Count}
[1,3,8,4,1,1,1,0,1,1,1,1,1,1,2], Kind = IdentifierName, {Count}
[1,3,8,4,1,1,1,0,1,1,1,1,1,1], Kind = SimpleMemberAccessExpression, {_collection.Count}
[1,3,8,4,1,1,1,0,1,1,1,1,1,2], Kind = CloseBracketToken, {]}
[1,3,8,4,1,1,1,0,1,1,1,1,1], Kind = ArrayRankSpecifier, {[_collection.Count]}
[1,3,8,4,1,1,1,0,1,1,1,1], Kind = ArrayType, {T[_collection.Count]}
[1,3,8,4,1,1,1,0,1,1,1], Kind = ArrayCreationExpression, {new T[_collection.Count]}
[1,3,8,4,1,1,1,0,1,1], Kind = EqualsValueClause, {= new T[_collection.Count]}
[1,3,8,4,1,1,1,0,1], Kind = VariableDeclarator, {items = new T[_collection.Count]}
[1,3,8,4,1,1,1,0], Kind = VariableDeclaration, {T[] items = new T[_collection.Count]}
[1,3,8,4,1,1,1,1], Kind = SemicolonToken, {;}
[1,3,8,4,1,1,1], Kind = LocalDeclarationStatement, {T[] items = new T[_collection.Count];}
[1,3,8,4,1,1,2,0,0,0,0], Kind = IdentifierToken, {_collection}
[1,3,8,4,1,1,2,0,0,0], Kind = IdentifierName, {_collection}
[1,3,8,4,1,1,2,0,0,1], Kind = DotToken, {.}
[1,3,8,4,1,1,2,0,0,2,0], Kind = IdentifierToken, {CopyTo}
[1,3,8,4,1,1,2,0,0,2], Kind = IdentifierName, {CopyTo}
[1,3,8,4,1,1,2,0,0], Kind = SimpleMemberAccessExpression, {_collection.CopyTo}
[1,3,8,4,1,1,2,0,1,0], Kind = OpenParenToken, {(}
[1,3,8,4,1,1,2,0,1,1,0,0], Kind = IdentifierToken, {items}
[1,3,8,4,1,1,2,0,1,1,0], Kind = IdentifierName, {items}
[1,3,8,4,1,1,2,0,1,1], Kind = Argument, {items}
[1,3,8,4,1,1,2,0,1,2], Kind = CommaToken, {,}
[1,3,8,4,1,1,2,0,1,3,0,0], Kind = NumericLiteralToken, {0}
[1,3,8,4,1,1,2,0,1,3,0], Kind = NumericLiteralExpression, {0}
[1,3,8,4,1,1,2,0,1,3], Kind = Argument, {0}
[1,3,8,4,1,1,2,0,1,4], Kind = CloseParenToken, {)}
[1,3,8,4,1,1,2,0,1], Kind = ArgumentList, {(items, 0)}
[1,3,8,4,1,1,2,0], Kind = InvocationExpression, {_collection.CopyTo(items, 0)}
[1,3,8,4,1,1,2,1], Kind = SemicolonToken, {;}
[1,3,8,4,1,1,2], Kind = ExpressionStatement, {_collection.CopyTo(items, 0);}
[1,3,8,4,1,1,3,0], Kind = ReturnKeyword, {return}
[1,3,8,4,1,1,3,1,0], Kind = IdentifierToken, {items}
[1,3,8,4,1,1,3,1], Kind = IdentifierName, {items}
[1,3,8,4,1,1,3,2], Kind = SemicolonToken, {;}
[1,3,8,4,1,1,3], Kind = ReturnStatement, {return items;}
[1,3,8,4,1,1,4], Kind = CloseBraceToken, {}}
[1,3,8,4,1,1], Kind = Block, {{
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }}
[1,3,8,4,1], Kind = GetAccessorDeclaration, {get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }}
[1,3,8,4,2], Kind = CloseBraceToken, {}}
[1,3,8,4], Kind = AccessorList, {{
            get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }
        }}
[1,3,8], Kind = PropertyDeclaration, {[DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
        public T[] Items
        {
            get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }
        }}
[1,3,9], Kind = CloseBraceToken, {}}
[1,3], Kind = ClassDeclaration, {internal sealed class ICollectionDebugView<T>
    {
        private readonly ICollection<T> _collection;

        public ICollectionDebugView(ICollection<T> collection)
        {
            ArgumentNullException.ThrowIfNull(collection);

            _collection = collection;
        }

        [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
        public T[] Items
        {
            get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }
        }
    }}
[1,4], Kind = CloseBraceToken, {}}
[1], Kind = NamespaceDeclaration, {namespace System.Collections.Generic
{
    internal sealed class ICollectionDebugView<T>
    {
        private readonly ICollection<T> _collection;

        public ICollectionDebugView(ICollection<T> collection)
        {
            ArgumentNullException.ThrowIfNull(collection);

            _collection = collection;
        }

        [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
        public T[] Items
        {
            get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }
        }
    }
}}
[2], Kind = EndOfFileToken, {}
[], Kind = CompilationUnit, {using System.Diagnostics;

namespace System.Collections.Generic
{
    internal sealed class ICollectionDebugView<T>
    {
        private readonly ICollection<T> _collection;

        public ICollectionDebugView(ICollection<T> collection)
        {
            ArgumentNullException.ThrowIfNull(collection);

            _collection = collection;
        }

        [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
        public T[] Items
        {
            get
            {
                T[] items = new T[_collection.Count];
                _collection.CopyTo(items, 0);
                return items;
            }
        }
    }
}}

